# vi: ft=sh

# from https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
#    ESC[ … 38;5;<n> … m Select foreground color
#    ESC[ … 48;5;<n> … m Select background color
#    0x00-0x07:  standard colors (as in ESC [ 30–37 m)
#    0x08-0x0F:  high intensity colors (as in ESC [ 90–97 m)
#    0x10-0xE7:  6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)
#    0xE8-0xFF:  grayscale from black to white in 24 steps
function term-256-color-test()
{
    for fgbg in 38 48 ; do #Foreground/Background
        echo "Standard colors"
        for ((color=0; color<8; color++)); do
            echo -en "\e[${fgbg};5;${color}m $(echo '   '${color}|tail -c 4)\e[0m"
        done
        echo #New line
        echo #New line
        echo "High-intensity colors"
        for ((color=8; color<16; color++)); do
            echo -en "\e[${fgbg};5;${color}m $(echo '   '${color}|tail -c 4)\e[0m"
        done
        echo #New line
        echo #New line
        for ((color=16; color<232; color++)); do
            #Display the color
            echo -en "\e[${fgbg};5;${color}m $(echo '   '${color}|tail -c 4)\e[0m"
            #Display 36 colors per lines
            if [ $((($color - 15) % 36)) = 0 ] ; then
                echo #New line
            fi
        done
        echo #New line
        echo "Grayscale colors"
        for ((color=232; color<256; color++)); do
            echo -en "\e[${fgbg};5;${color}m $(echo '   '${color}|tail -c 4)\e[0m"
        done
        echo #New line
        echo #New line
    done
}

function term-truecolor-test()
{
    printf "\x1b[38;2;255;100;0mTRUECOLOR\x1b[0m\n"
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
        for (colnum = 0; colnum<77; colnum++) {
            r = 255-(colnum*255/76);
            g = (colnum*510/76);
            b = (colnum*255/76);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'
}

function helm_older_releases() {
    # Check if the correct number of arguments is provided
    if [ "$#" -ne 2 ]; then
        echo "Usage: helm_older_releases <days_threshold> <name_width>"
        echo "Example: helm_older_releases 30 40"
        return 1
    fi

    # Assign arguments to variables
    days_threshold=$1
    name_width=$2

    # Get the current date in epoch time
    current_date=$(date +%s)

    # Define the age limit
    age_limit=$(($days_threshold * 24 * 60 * 60))

    # Print header
    printf "%-${name_width}s %-20s\n" "RELEASE NAME" "DATE"
    printf "%-${name_width}s %-20s\n" "------------" "----"

    # List all helm releases and their revision dates
    helm list --output json | jq -r '.[] | "\(.name) \(.updated)"' | while read -r line; do
    # Extract the release name and date
    release_name=$(echo $line | awk '{print $1}')
    release_date=$(echo $line | awk '{print $2, $3, $4}')  # Adjust based on your helm's date format
    date=$(echo $line | awk '{print $2}')

    # Convert the release date to epoch time
    release_date_epoch=$(date -d "$release_date" +%s)

    # Calculate the age of the release
    age=$((current_date - release_date_epoch))

    # Check if the age is greater than the limit
    if [ $age -gt $age_limit ]; then
        # Print the release name
        printf "%-${name_width}s %-20s\n" "$release_name" "$date"
    fi
    done
}

function getArtifactoryPassword() {
    source $HOME/.shell_vars
    echo "Please enter your user [$ARTIFACTORY_USER] password:"
    read -s password
    encrypted_password=$(curl -s -u $ARTIFACTORY_USER:$password -X GET $ARTIFACTORY_URL/artifactory/api/security/encryptedPassword)
    echo
    echo -e "\tEncrypted Password: $encrypted_password"
}

funct oc_login() {
    source $HOME/.shell_vars

    missing_data=0

    if [ ${#K8S_CLUSTER_LIST[@]} -eq 0 ]; then
        echo -e "Variable \033[0;95mK8S_CLUSTER_LIST\033[0m from \$HOME/.shell_vars is empty."
        missing_data=1
    fi

    if [ -z "${K8S_USERNAME}" ]; then
        echo -e "Variable \033[0;95mK8S_USERNAME\033[0m from \$HOME/.shell_vars is empty."
        missing_data=1
    fi

    if [ $missing_data -eq 1 ]; then
        return
    fi

    # Use fzf to let the user pick a server.
    printf -v var "%s\n" "${K8S_CLUSTER_LIST[@]}"
    selected_server=$(echo "${var}" | fzf)

    # Check if a server was selected
    if [ -n "$selected_server" ]; then
        oc login $selected_server -u $K8S_USERNAME
        echo "oc login $selected_server -u $K8S_USERNAME" >> $HOME/.zsh_history
        # Reload zsh history
        fc -R
    fi
}